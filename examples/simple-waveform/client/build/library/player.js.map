{"version":3,"file":"player.js","sourceRoot":"","sources":["../../src/library/player.ts"],"names":[],"mappings":"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","sourcesContent":["import { PlayerCore, ICoreOptions, ISoundAttributes, ISound } from '../../node_modules/web-audio-api-player/dist/index.js'\n\nexport interface IListenersOptions {\n    playPauseButtonElementId: string\n    stopButtonElementId: string\n    volumeSliderId: string\n}\n\nexport type onPlaylingCallbackType = (playingProgress: number, maximumValue: number, currentValue: number) => void\nexport type onStoppedCallbackType = (playTimeOffset: number) => void\n\nexport class PlayerExample {\n\n    protected player: PlayerCore\n    protected playerAudioContext: AudioContext\n    protected isPlayOrPause: string\n\n    constructor() {\n\n        const playerOptions: ICoreOptions = {\n            soundsBaseUrl: 'https://mp3l.jamendo.com/?trackid=',\n            playingProgressIntervalTime: 500,\n            loadPlayerMode: PlayerCore.PLAYER_MODE_AUDIO,\n        }\n\n        const player = new PlayerCore(playerOptions)\n\n        this.player = player\n\n        player.getAudioContext().then((audioContext: AudioContext) => {\n            this.playerAudioContext = audioContext\n        }).catch((error) => {\n            console.log(error)\n        })\n\n        this.isPlayOrPause = 'pause'\n\n    }\n\n    public loadSong(songId: number): ISound {\n\n        const songAttributes: ISoundAttributes = {\n            source: [{ url: songId + '&format=mp31', codec: 'mp3' }, { url: songId + '&format=ogg1', codec: 'ogg', isPreferred: true }],\n            id: songId,\n            onLoading: (loadingProgress, maximumValue, currentValue) => {\n                //console.log('loading: ', loadingProgress, maximumValue, currentValue)\n            },\n            onPlaying: (playingProgress, maximumValue, currentValue) => {\n                //console.log('playing: ', playingProgress, maximumValue, currentValue)\n                //console.log('firstSound.duration: ', song.duration)\n            },\n            onStarted: (playTimeOffset) => {\n                //console.log('started', playTimeOffset)\n            },\n            onPaused: (playTimeOffset) => {\n                //console.log('paused', playTimeOffset)\n            },\n            onStopped: (playTimeOffset) => {\n                //console.log('stopped', playTimeOffset)\n            },\n            onResumed: (playTimeOffset) => {\n                //console.log('resumed', playTimeOffset)\n            },\n            onEnded: (willPlayNext) => {\n                //console.log('ended', willPlayNext)\n                if (!willPlayNext) {\n                    this._stopAction()\n                }\n            },\n        }\n\n        const song = this.player.addSoundToQueue({ soundAttributes: songAttributes })\n\n        //console.log(song)\n\n        return song\n\n    }\n\n    public goToPosition(positionInPercent: number): void {\n\n        this.player.setPosition(positionInPercent)\n\n    }\n\n    protected _playPauseAction(): void {\n\n        if (this.isPlayOrPause === 'play') {\n            this.player.pause()\n            this.isPlayOrPause = 'pause'\n            this._buttonDomPause()\n        } else {\n            this.player.play()\n            this.isPlayOrPause = 'play'\n            this._buttonDomPlay()\n        }\n\n    }\n\n    protected _buttonDomPause(): void {\n        document.getElementById('js-pause').classList.add('hidden')\n        document.getElementById('js-play').classList.remove('hidden')\n    }\n\n    protected _buttonDomPlay(): void {\n        document.getElementById('js-pause').classList.remove('hidden')\n        document.getElementById('js-play').classList.add('hidden')\n    }\n\n    protected _stopAction(): void {\n        this.player.stop()\n        this.isPlayOrPause = 'pause'\n        this._buttonDomPause()\n    }\n\n    protected _changeVolumeAction(volume: number): void {\n        this.player.setVolume(volume)\n    }\n\n    public initializeClickListeners(listenersOptions: IListenersOptions): void {\n\n        const playPauseButtonElement = document.getElementById(listenersOptions.playPauseButtonElementId)\n        const stopButtonElement = document.getElementById(listenersOptions.stopButtonElementId)\n        const volumdSlideElement = document.getElementById(listenersOptions.volumeSliderId)\n\n        playPauseButtonElement.addEventListener('click', () => {\n            this._playPauseAction()\n        })\n\n        playPauseButtonElement.addEventListener('touch', () => {\n            this._playPauseAction()\n        })\n\n        stopButtonElement.addEventListener('click', () => {\n            this._stopAction()\n        })\n\n        stopButtonElement.addEventListener('touch', () => {\n            this._stopAction()\n        })\n\n        volumdSlideElement.addEventListener('change', (event) => {\n            const targetElement = event.target as HTMLInputElement\n            const volume = parseInt(targetElement.value)\n            this._changeVolumeAction(volume)\n        })\n\n    }\n\n}\n"]}